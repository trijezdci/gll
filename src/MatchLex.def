(*!m2pim*)

(* *************************************************************************
 * Grammar Tool for LL(1) Grammars
 *
 * Copyright (C) 2018 Benjamin Kowarsch
 *
 * Synopsis
 *
 * GLL is a tool to verify and visualise LL(1) grammars.  It parses EBNF
 * specifications of grammars, calculates FIRST and FOLLOW sets, reports
 * any LL(1) violations and generates (railroad) syntax diagrams.
 *
 * File
 *
 * MatchLex.def
 *
 * Interface of EBNF Lexer Support Library.
 *
 * License
 *
 * GLL is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License Version 2 (LGPL2)
 * as published by the Free Software Foundation.
 *
 * GLL is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Refer to the license for details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GLL.  If not, please visit <http://www.gnu.org/licenses/>.
 * ************************************************************************* *)

DEFINITION MODULE MatchLex;

(* Lexer Support Library for EBNF Lexer *)

FROM Token IMPORT TokenT;
FROM Source IMPORT SourceT;
FROM Diagnostic IMPORT DiagnosticT;


(* Semantic Symbols *)

PROCEDURE NonTerminal ( source : SourceT; VAR token : TokenT );
(* Matches the input in source to a non-terminal identifier
   and consumes it. *)


PROCEDURE TerminalOrResword ( source : SourceT; VAR token : TokenT );
(* Matches the input in source to a terminal identifier or reserved word
   and consumes it. *)


PROCEDURE QuotedLiteral ( source : SourceT; VAR token : TokenT );
(* Matches the input in source to a quoted literal and consumes it. *)


(* Non-Semantic Symbols *)

PROCEDURE Pragma ( source : SourceT );
(* Matches the input in source to an opening pragma delimiter
   and consumes the pragma, including its closing delimiter. *)


PROCEDURE BlockComment ( source : SourceT );
(* Matches the input in source to an opening block comment delimiter
   and consumes the comment, including its closing delimiter. *)


(* Disabled Code Sections *)

PROCEDURE DisabledCodeBlock ( source : SourceT );
(* Matches the input in source to an opening disabled code block delimiter
   and consumes the disabled code block, including its closing delimiter. *)


(* Diagnostics *)

PROCEDURE GetDiag ( diag : DiagnosticT );
(* Passes the diagnostics of the last operation. *)


END MatchLex.
