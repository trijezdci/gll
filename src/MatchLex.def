(*!m2pim*)

(* *************************************************************************
 * Grammar Tool for LL(1) Grammars
 *
 * Copyright (C) 2018 Benjamin Kowarsch
 *
 * Synopsis
 *
 * GLL is a tool to verify and visualise LL(1) grammars.  It parses EBNF
 * specifications of grammars, calculates FIRST and FOLLOW sets, reports
 * any LL(1) violations and generates (railroad) syntax diagrams.
 *
 * File
 *
 * MatchLex.def
 *
 * Interface of EBNF Lexer Support Library.
 *
 * License
 *
 * GLL is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License Version 2 (LGPL2)
 * as published by the Free Software Foundation.
 *
 * GLL is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Refer to the license for details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GLL.  If not, please visit <http://www.gnu.org/licenses/>.
 * ************************************************************************* *)

DEFINITION MODULE MatchLex;

(* Lexer Support Library for EBNF Lexer *)

FROM Token IMPORT TokenT;
FROM Source IMPORT SourceT;
FROM Diagnostic IMPORT DiagnosticT;


(* Semantic Symbols *)

(* ---------------------------------------------------------------------------
 * Procedure MatchLex.reswordOrIdent(source, symbol)
 * ---------------------------------------------------------------------------
 * Matches the input in source  to a reserved word or identifier.  If there is
 * a match,  it consumes  the symbol's lexeme  in source  and  passes back the
 * matched symbol.  If there is  no match,  it does NOT consume any input  and
 * passes back a diagnostic symbol.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE ReswordOrIdent ( source : SourceT; VAR sym : SymbolT );


(* ---------------------------------------------------------------------------
 * Procedure MatchLex.quotedLiteral(source, symbol)
 * ---------------------------------------------------------------------------
 * Matches the input in source  to a quoted literal.  If there is a match,  it
 * consumes the symbol's lexeme in source  and passes back the matched symbol.
 * If there is  no match,  it does  NOT  consume any input  and  passes back a
 * diagnostic symbol.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE QuotedLiteral ( source : SourceT; VAR sym : SymbolT );


(* ---------------------------------------------------------------------------
 * Procedure MatchLex.charCodeLiteral(source, symbol)
 * ---------------------------------------------------------------------------
 * Matches  the input  in source  to a  character code literal.  If there is a
 * match,  it consumes  the  symbol's lexeme  in source  and  passes back  the
 * matched symbol.  If there is  no match,  it does NOT consume any input  and
 * passes back a diagnostic symbol.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE CharCodeLiteral ( source : SourceT; VAR sym : SymbolT );


(* ---------------------------------------------------------------------------
 * Procedure MatchLex.predefinedLiteral(source, symbol)
 * ---------------------------------------------------------------------------
 * Matches the input in source to a  predefined literal.  If there is a match,
 * it  consumes  the symbol's lexeme  in source  and  passes back  the matched
 * symbol.  If there is no match,  it does  NOT  consume any input  and passes
 * back a diagnostic symbol.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE PredefinedLiteral ( source : SourceT; VAR sym : SymbolT );


(* Non-Semantic Symbols *)

(* ---------------------------------------------------------------------------
 * Function MatchLex.skipPragma(source)
 * ---------------------------------------------------------------------------
 * Matches the input in source  to an  opening pragma delimiter,  consumes the
 * pragma,  including its  closing delimiter  and  returns  the  new lookahead
 * character.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE skipPragma ( source : SourceT ) : CHAR;


(* ---------------------------------------------------------------------------
 * Function MatchLex.skipBlockComment(source)
 * ---------------------------------------------------------------------------
 * Matches the input in source to an opening block comment delimiter, consumes
 * the  block comment, including its  closing delimiter  and  returns  the new
 * lookahead character.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE skipBlockComment ( source : SourceT ) : CHAR;



(* Disabled Code Sections *)

(* ---------------------------------------------------------------------------
 * Function MatchLex.skipDisabledCodeBlock(source)
 * ---------------------------------------------------------------------------
 * Matches the input  in source  to an  opening disabled code block delimiter,
 * consumes  the  disabled code block,  including  its  closing delimiter  and
 * returns the new lookahead character.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE skipDisabledCodeBlock ( source : SourceT ) : CHAR;


END MatchLex.
