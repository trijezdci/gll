(*!m2pim*)

(* *************************************************************************
 * Grammar Tool for LL(1) Grammars
 *
 * Copyright (C) 2018 Benjamin Kowarsch
 *
 * Synopsis
 *
 * GLL is a tool to verify and visualise LL(1) grammars.  It parses EBNF
 * specifications of grammars, calculates FIRST and FOLLOW sets, reports
 * any LL(1) violations and generates (railroad) syntax diagrams.
 *
 * File
 *
 * Parser.def
 *
 * Interface of EBNF parser module.
 *
 * License
 *
 * GLL is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License Version 2 (LGPL2)
 * as published by the Free Software Foundation.
 *
 * GLL is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Refer to the license for details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GLL.  If not, please visit <http://www.gnu.org/licenses/>.
 * ************************************************************************* *)

DEFINITION MODULE Parser;

(* Parser for EBNF grammar specifications *)


FROM AST IMPORT AstT;
FROM String IMPORT StringT;


(* Return Status *)

TYPE Status = ( Success, Failure );


(* Result Summary *)

TYPE Statistics = RECORD
  lexicalWarnings,
  lexicalErrors,
  syntaxWarnings,
  syntaxErrors : CARDINAL;
END;


(* Operations *)

(* ---------------------------------------------------------------------------
 * Procedure Parser.ParseEBNF (source, ast, status)
 * ---------------------------------------------------------------------------
 * Parses rule specification and builds its AST.  Passes back AST on success,
 * or NIL on failure.  Sets statistics and passes back status.
 *
 * specification :=
 *   GRAMMAR ident ';' ( definition ';' )+ ENDG ident '.'
 *   ;
 * ---------------------------------------------------------------------------
 *)
PROCEDURE ParseEBNF ( source : StringT; VAR ast : AstT; VAR status : Status );


(* ---------------------------------------------------------------------------
 * Procedure Parser.GetStats (stats, status)
 * ---------------------------------------------------------------------------
 * Passes back  statistics of a  prior call  to procedure ParseEBNF.  If there
 * was no prior call to ParseEBNF,  Failure is passed in status  and  the data
 * passed in stats is invalid and meaningless.
 * ---------------------------------------------------------------------------
 *)
PROCEDURE GetStats ( stats : Statistics; VAR status : Status );


END Parser.
