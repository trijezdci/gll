(*!m2pim*)

(* *************************************************************************
 * Grammar Tool for LL(1) Grammars
 *
 * Copyright (C) 2018 Benjamin Kowarsch
 *
 * Synopsis
 *
 * GLL is a tool to verify and visualise LL(1) grammars.  It parses EBNF
 * specifications of grammars, calculates FIRST and FOLLOW sets, reports
 * any LL(1) violations and generates (railroad) syntax diagrams.
 *
 * File
 *
 * NonTerminals.def
 *
 * Interface to FIRST/FOLLOW set database for EBNF parser.
 *
 * License
 *
 * GLL is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License Version 2 (LGPL2)
 * as published by the Free Software Foundation.
 *
 * GLL is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Refer to the license for details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GLL.  If not, please visit <http://www.gnu.org/licenses/>.
 * ************************************************************************* *)

DEFINITION MODULE NonTerminals;

(* FIRST/FOLLOW set database for EBNF parser *)

FROM Token IMPORT TokenT;
FROM TokenSet IMPORT TokenSetT;


(* Productions *)

TYPE Production =
  ( Specification,
    ReswordList,
    ReswordDef,
    Definition,
    AliasDef,
    NonTermAliasDef,
    TermAliasDef,
    TermAliasValue,
    Literal,
    NonTerminalDef,
    Expression,
    Term,
    SimpleTerm,
    Factor,
    TerminalDef,
    TerminalValue,
    TerminalExpression,
    TerminalTerm,
    SimpleTerminalTerm,
    TerminalFactor,
    FragmentDef,
    NonSemanticDef,
    LiteralOrRange,
    QuotedLowerLetterOrRange,
    QuotedUpperLetterOrRange,
    QuotedDigitOrRange,
    CharCodeOrRange );


TYPE ProductionT = Production; (* for unqualified use *)


(* Operations *)

PROCEDURE FIRST ( p : Production ) : TokenSetT;
(* Returns a reference to the FIRST set of production p. *)


PROCEDURE inFIRST ( p : Production; token : TokenT ) : BOOLEAN;
(* Returns TRUE if token is an element of FIRST(p), otherwise FALSE. *)


PROCEDURE FOLLOW ( p : Production ) : TokenSetT;
(* Returns a reference to the FOLLOW set of production p. *)


PROCEDURE inFOLLOW ( p : Production; token : TokenT ) : BOOLEAN;
(* Returns TRUE if token is an element of FOLLOW(p), otherwise FALSE. *)


END NonTerminals.
